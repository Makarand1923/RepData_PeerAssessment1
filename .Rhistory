# This really is meant as a clean way to
# copy and paste line by line to R
# If you paste the whole thing, it sort of loses
# something...
require(quantmod)
getSymbols("YHOO",src="google") # from google finance
getSymbols("GOOG",src="yahoo") # from yahoo finance
getSymbols("DEXUSJP",src="FRED") # FX rates from FRED
getSymbols("XPT/USD",src="Oanda") # Platinum from Oanda Sort of handy, but it gets better... > # Specify lookup parameters, and save for future sessions.
setSymbolLookup(YHOO='google',GOOG='yahoo')
setSymbolLookup(DEXUSJP='FRED')
setSymbolLookup(XPTUSD=list(name="XPT/USD",src="oanda"))
saveSymbolLookup(file="mysymbols.rda")
# new sessions call loadSymbolLookup(file="mysymbols.rda")
getSymbols(c("YHOO","GOOG","DEXUSJP","XPTUSD"))
install.packages('quantmod')
getSymbols("AAPL",src="yahoo")
[1] "AAPL"
require(quantmod)
getSymbols("YHOO",src="google") # from google finance
View(YHOO)
barChart(YHOO)
find.package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
x <- 3
x
y
del x
delete x
x
X <-4
x
X
x <-6
x
x[2]<-9
x
x <- rnorm(1000)
x
f <- factor(x,c("g1","g2"))
f
x
x <- rep(o:1,50)
x <- rep(0:1,50)
f <- factor(x,c("g1","g2"))
x
f <- factor(x)
f
f <- factor(x, lable = c("g1","g2"))
f <- factor(x, lables = c("g1","g2"))
f <- factor(x, labels = c("g1","g2"))
f
x <- factor(x, labels = c("g1","g2"))
x
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
nlme
nlme()
dim(nlme)
dim(Bodyweight)
dim(Diet)
library(datasets)
data(airquality)
head(airquality)
summary(airquality)
dim(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
library(ggplot)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
plot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
View(airquality)
View(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
str(movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + geom_smooth(method = "lm")
version()
version
install.packages("installr")
check.for.updates.R()
library(installr)
check.for.updates.R()
install.R()
copy.packages.between.libraries()
install.packages("mgcv")
library(quantstart)
library(quantstrat)
version
search()
suppressWarnings(try(rm(list=ls(FinancialInstrument:::.instrument),pos=FinancialInstrument:::.instrument),silent=TRUE))
currency("USD")
stock("SPY",currency="USD",multiplier=1)
ls(envir=FinancialInstrument:::.instrument)
ls(all=T)
initDate <- '1997-12-31'
startDate <- '1998-01-01'
endDate <-  '2013-07-31'
initEq <- 1e6
initEq
Sys.setenv(TZ="UTC")
if(file.exists("SPY.RData"))
{
load("SPY.RData")
} else {
getSymbols('SPY', from=startDate, to=endDate, adjust=T)
save(list="SPY",file="SPY.RData")
}
View(SPY)
SPY=to.monthly(SPY, indexAt='endof')
View(SPY)
SPY$SMA10m <- SMA(Cl(SPY), 10)
View(SPY)
qs.strategy <- "qsFaber"
rm.strat(qs.strategy)
initPortf(qs.strategy,'SPY', initDate=initDate)
initAcct(qs.strategy,portfolios=qs.strategy, initDate=initDate, initEq=initEq)
args(initOrders)
initOrders(portfolio=qs.strategy,initDate=initDate)
args(strategy)
strategy(qs.strategy,store=TRUE)
ls(all=T)
ls(.blotter)
ls(.strategy)
strat <-getStrategy(qs.strategy)
class(strat)
summary(strat)
str(strat)
dd.indicator(strategy = qs.strategy, name = "SMA",
arguments = list(x = quote(Cl(mktdata)), n=10), label="SMA10")
add.indicator(strategy = qs.strategy, name = "SMA",
arguments = list(x = quote(Cl(mktdata)), n=10), label="SMA10")
summary(getStrategy(qs.strategy))
add.signal(qs.strategy,name="sigCrossover",
arguments = list(columns=c("Close","SMA10"),relationship="gt"),
label="Cl.gt.SMA")
add.signal(qs.strategy,name="sigCrossover",
arguments = list(columns=c("Close","SMA10"),relationship="lt"),
label="Cl.lt.SMA")
summary(getStrategy(qs.strategy))
add.rule(qs.strategy, name='ruleSignal',
arguments = list(sigcol="Cl.gt.SMA", sigval=TRUE, orderqty=900,
ordertype='market', orderside='long', pricemethod='market'),
type='enter', path.dep=TRUE)
add.rule(qs.strategy, name='ruleSignal',
arguments = list(sigcol="Cl.lt.SMA", sigval=TRUE, orderqty='all',
ordertype='market', orderside='long', pricemethod='market'),
type='exit', path.dep=TRUE)
applyStrategy(strategy=qs.strategy , portfolios=qs.strategy)
View(SPY)
View(mktdata)
options(width=110)
mktdata["199907/199912"]
options(width=82)
Dates <- paste(startDate,endDate,sep="::")
updatePortf(qs.strategy,Dates=Dates)
updateAcct(qs.strategy,Dates=Dates)
updateEndEq(qs.strategy,Dates=Dates)
checkBlotterUpdate <- function(port.st,account.st,verbose=TRUE)
{
ok <- TRUE
p <- getPortfolio(port.st)
a <- getAccount(account.st)
syms <- names(p$symbols)
port.tot <- sum(sapply(syms,FUN = function(x) eval(parse(
text=paste("sum(p$symbols",x,"posPL.USD$Net.Trading.PL)",sep="$")))))
initEq <- as.numeric(first(a$summary$End.Eq))
endEq <- as.numeric(last(a$summary$End.Eq))
if( !isTRUE(all.equal(port.tot,endEq-initEq)) ) {
ok <- FALSE
if( verbose )
print("portfolio P&L doesn't match account P&L")
}
if( sum(duplicated(index(p$summary))) ) {
ok <- FALSE
if( verbose )
print("duplicate timestamps in portfolio summary")
}
if( sum(duplicated(index(a$summary))) ) {
ok <- FALSE
if( verbose )
print("duplicate timestamps in account summary")
}
return(ok)
}
checkBlotterUpdate(qs.strategy,qs.strategy)
myTheme<-chart_theme()
myTheme$col$dn.col<-'lightblue'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'
chart.Posn(qs.strategy, Symbol = 'SPY', Dates = '1998::',theme=myTheme)
plot(add_SMA(n=10,col=4, on=1, lwd=2))
getTxns(Portfolio=qs.strategy, Symbol="SPY")
(tstats <- tradeStats(Portfolio=qs.strategy, Symbol="SPY"))
View(tstats)
ob <- getOrderBook(qs.strategy)
ob
class(ob)
names(ob)
names(ob$qsFaber)
names(ob$qsFaber$SPY)
ob$qsFaber$SPY[,1:5]
perTradeStats(qs.strategy)
a <- getAccount(qs.strategy)
last(a$summary,5)
plot(equity,main="Faber Strategy Equity Curve")
equity <- a$summary$End.Eq
plot(equity,main="Faber Strategy Equity Curve")
ret <- Return.calculate(equity,method="log")
View(ret)
setwd("C:/Makarand/JH DS Course/Projects/RepReasearchPA1")
getwd()
require(ggplot2)
packages <- c("data.table", "ggplot2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
if(!suppressMessages(require(ggplot2))){
print('trying to install ggplot2')
install.packages('ggplot2')
if(suppressMessagesrequire(ggplot2)){
print("ggplot2 installed and loaded")
} else {
stop("could not install ggplot2")
}
}
packages <- c("data.table", "ggplot2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
f <- "activity.zip"
if (!file.exists("activity.zip")) {
download.file(url,file.path(path,f))
unzip(file.path(path,f),exdir=getwd())
}
data <- read.csv(file = f, stringsAsFactors = FALSE)
head(data, 10)
if (!file.exists("activity.zip")) {
download.file(url,file.path(path,f))
unzip(file.path(path,f),exdir=getwd())
}
View(data)
data <- read.csv(file = "activity.csv", stringsAsFactors = FALSE)
head(data, 10)
head(data)
summary(data)
packages <- c("data.table", "ggplot2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
f <- "activity.zip"
if (!file.exists("activity.zip")) {
download.file(url,file.path(path,f))
unzip(file.path(path,f),exdir=getwd())
}
activityData <- read.csv(file = "activity.csv", stringsAsFactors = FALSE)
head(activityData)
summary(activityData)
activityData$date <- as.Date(activityData$date)
View(activityData)
knitr::opts_chunk$set(fig.path='figures/')
stepsPerDay <- aggregate(steps ~ date, data=activity, FUN=sum)
stepsPerDay <- aggregate(steps ~ date, data=activityData, FUN=sum)
View(stepsPerDay)
qplot(date,
data=activityData,
weight=steps,
geom="histogram",
xlab="Date",
ylab="Total Number of Steps") +
geom_histogram(colour="black", fill="red") +
theme(axis.text.x=element_text(angle=-90, hjust=0))
dev.close()
close.dev()
qplot(x=date, y=steps,
data=subset(activityData, complete.cases(activity)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
qplot(x=date, y=steps,
data=subset(activityData, complete.cases(activityData)),
stat='summary', fun.y=sum, geom='bar') +
labs(title='Figure 1: Number of steps taken daily\n',
y='Total steps per day', x='Date')
totalNA <- sum(!complete.cases(activityData))
totalNA1 <- sum(is.NA(activityData))
totalNA1 <- sum(is.na(activityData))
daterange <- seq.Date(from = min(activityData$date),
to = max(activityData$date),
by='1 day')
dateNAs <- sum(!activityData$date[complete.cases(activityData)] %in% datesrange)
dateNAs <- sum(!activityData$date[complete.cases(activityData)] %in% daterange)
dateNA <- sum(is.na(activity$date))
stepNA <- sum(is.na(activityData$steps))
dateNA <- sum(is.na(activityData$date))
fillSteps <- function(d){
ad <- aggregate(steps ~ interval, d, mean)
for(i in d[is.na(d$steps),]$interval){
d[d$interval == i,]$steps <- ad[aggdata$interval == i,]$steps
}
d
}
modData <- fillSteps(activityData)
head(modData)
fillSteps <- function(d){
ad <- aggregate(steps ~ interval, d, mean)
for(i in d[is.na(d$steps),]$interval){
d[d$interval == i,]$steps <- ad[ad$interval == i,]$steps
}
d
}
modData <- fillSteps(activityData)
head(modData)
fillSteps <- function(d){
ad <- aggregate(steps ~ interval, d, mean)
for(i in d[is.na(d$steps),]$interval){
d[d$interval == i,]$steps <- round(ad[ad$interval == i,]$steps)
}
d
}
modData <- fillSteps(activityData)
head(modData)
View(activityData)
dsi <- aggregate(steps ~ interval, activityData, mean)
View(dsi)
activityData_mod <- merge(activityData, dsi, by="interval", suffixes=c("",".new"))
nas <- is.na(activityData_mod$steps)
activityData_mod$steps[nas] <- activityData_mod$steps.new[nas]
activityData <- activityData_mod[,c(1:3)]
View(activityData_mod)
View(activityData)
activityData$dayOfWeek <- ifelse(as.integer(format(activityData$date, format = '%u')) %in% c(1:5),
'weekday', 'weekend')
View(activityData)
factor(activityData$dayOfWeek)
dsim <- aggregate(steps ~ interval, activityData, mean)
View(dsim)
dsim$dayOfWeek <- ifelse(as.integer(format(dsim$date, format = '%u')) %in% c(1:5),
'weekday', 'weekend')
factor(dsim$dayOfWeek)
activityData$dayOfWeek <- ifelse(as.integer(format(activityData$date, format = '%u')) %in% c(1:5),
'weekday', 'weekend')
factor(activityData$dayOfWeek)
View(dsim)
dsim <- aggregate(steps ~ interval, activityData[activiyData$dayOfWeek == 'weekday',], mean)
dsim <- aggregate(steps ~ interval, activityData[activityData$dayOfWeek == 'weekday',], mean)
dsimw <- aggregate(steps ~ interval, activityData[activityData$dayOfWeek == 'weekend',], mean)
dsim <- aggregate(activityData$steps, list(activityData$dayOfWeek, activityData$dayOfWeek), mean)
View(dsim)
dsim <- aggregate(activityData$steps, list(activityData$dayOfWeek, activityData$interval), mean)
View(dsim)
qplot(x=interval, y=steps,
data=dsim, geom='line') + facet_grid(dayOfWeek~.) +
labs(title='Plot 4: Mean steps taken each interval in a days \n factored by weekdays and Weekends',
y='Mean steps per interval', x='Interval')
View(dsim)
setwd("C:/Makarand/JH DS Course/Projects/RepReasearchPA1git/RepData_PeerAssessment1")
knit2html()
library(knitr)
knit2html()
knit2html(PA1_template.Rmd)
getwd()
library(knitr)
library(markdown)
knit("PA1_template.Rmd")
